/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    static bool comp(Job a, Job b){
        if(a.profit == b.profit){
            if(a.dead == b.dead) return true;
            return a.dead > b.dead;
        }
        return a.profit > b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) { 
        
        int maxi = -1;
        for(int i=0; i<n; i++){
            maxi = max(maxi, arr[i].dead);
        }
        
        vector<int> st(maxi+1, 0);
        
        sort(arr, arr+n, comp);
        
        int total_profit = 0, jobs_done = 0, count = 0;
        for(int i=0; i<n; i++){
            int deadline = arr[i].dead;
            int prof = arr[i].profit;
            
            if(st[deadline]==0){
                st[deadline] = 1;
                total_profit += prof;
                jobs_done++; 
                count++;
            }
            else{
                
                if(count==n) return {jobs_done,total_profit};
                
                for(int j=deadline-1; j>0; j--){
                    if(st[j]==0){
                        st[j] = 1;
                        total_profit += prof;
                        jobs_done++; 
                        count++;
                        break;
                    }
                }
                
            }
        }
        
        return {jobs_done,total_profit};
    } 
};
