/**0
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<TreeNode*> &arr){
        if(!root) return;
        
        inorder(root->left, arr);
        arr.push_back(root);
        inorder(root->right, arr);
    }
    
    void recoverTree(TreeNode* root) {
        vector<TreeNode*> arr;
        inorder(root, arr);

        int i=0, n=arr.size(), j=0;

        for(; i<n; i++){
            if(arr[i]->val > arr[i+1]->val) break;
        }
        j = i+2;
        for(; j<n; j++){
            if(arr[j-1]->val > arr[j]->val) break;
        }

        if(j>=n) swap(arr[i]->val, arr[i+1]->val);
        else swap(arr[i]->val, arr[j]->val);

    }
};
