class Solution {
  public:
    // Function to find the number of islands.
    void dfs(int row, int col, vector<vector<char>>& grid, vector<vector<int>>& visited){
        visited[row][col] = 1;

        int n = grid.size(), m = grid[0].size();
        
        for(int dR = -1; dR<=1; dR++){
            for(int dC = -1; dC<=1; dC++){
                
                if(dR==0 && dC==0) continue;
                
                int nr = dR + row;
                int nc = dC + col;
                
                if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]=='1' && visited[nr][nc]==0){
                    dfs(nr, nc, grid, visited);
                }
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n = grid.size(), m = grid[0].size();

        vector<vector<int>> visited(n, vector<int>(m,0));

        int result = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]=='1' && visited[i][j]==0){
                    dfs(i, j, grid, visited);
                    result++;
                }
            }
        }

        return result;
    }
};
