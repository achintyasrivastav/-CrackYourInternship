class Solution {
public:
    //buy == 1 kharido
    //buy == 0 becho
    int solve(int index, vector<int> &prices, int buy,  vector<vector<int>> &dp){

        if(index==prices.size()) return 0;

        if(dp[index][buy]!=-1) return dp[index][buy];

        int profit = 0;

        if(buy){
            profit = max(profit, 0-prices[index] + solve(index+1, prices, 0, dp));
            profit = max(profit, solve(index+1, prices, 1, dp));
        }
        else{
            profit = max(profit, prices[index] + solve(index+1, prices, 1, dp));
            profit = max(profit, solve(index+1, prices, 0, dp));
        }

        return dp[index][buy] = profit;
    }
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int>(2,-1));
        return solve(0, prices, 1, dp);
    }
};

//tabulation
int maxProfit(vector<int>& prices) {
    int n = prices.size();

    vector<vector<int>> dp(n+1, vector<int>(2,0));

    //return solve(0, prices, 1, dp);

    for(int index=n-1; index>=0; index--){
        for(int buy=0; buy<=1; buy++){

            int profit = 0;

            if(buy){
                profit = max(dp[index+1][1], 0-prices[index] + dp[index+1][0]);
            }
            else{
                profit = max(dp[index+1][0], prices[index] + dp[index+1][1]);
            }

            dp[index][buy] = profit;

        }
    }

    return dp[0][1];
}

