class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
  	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
  	{
  	    vector<vector<int>> grid(N, vector<int>(N,0));
  	    
  	    queue<pair<pair<int,int>, int>> q;
  	    q.push({{KnightPos[0]-1, KnightPos[1]-1}, 0});
  	    grid[KnightPos[0]-1][KnightPos[1]-1] = 1;
  	    
  	    while(!q.empty()){
  	        int row = q.front().first.first;
  	        int col = q.front().first.second;
  	        int steps = q.front().second;
  	        q.pop();
  	        
  	        if(row==TargetPos[0]-1 && col==TargetPos[1]-1) return steps;
  	        
  	        int dR[8] = {-2, -2, -1, 1, 2, 2, -1, 1};
  	        int dC[8] = {-1, 1, 2, 2, -1, 1, -2, -2};
  	        
  	        for(int i=0; i<8; i++){
  	            int nrow = row + dR[i];
  	            int ncol = col + dC[i];
  	            
  	            if(nrow<N && nrow>=0 && ncol<N && ncol>=0 && grid[nrow][ncol]==0){
  	                q.push({{nrow, ncol}, steps+1});
  	                grid[nrow][ncol] = 1;
  	            }
  	        }
   	    }
  	    
  	    return -1;
  	    
  	}
};
