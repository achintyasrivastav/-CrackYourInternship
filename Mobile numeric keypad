class Solution {
  public:
    long long dfs(int node, int n, vector<vector<int>> &adj, vector<vector<long long>> &dp){
        if(n==0) return 1;
        if(dp[node][n]!=-1) return dp[node][n];
        
        long long count = 0;
        count += dfs(node, n-1, adj, dp);
        for(auto it : adj[node]){
            count += dfs(it, n-1, adj, dp);
        }
        
        return dp[node][n] = count;
    }
    long long getCount(int n) {
        // Your code goes here
        vector<vector<int>> adj = {{8}, {2,4}, {1,5,3}, {2,6}, {1,5,7}, {2,4,6,8},
                            {3,5,9}, {4,8}, {7,5,9,0}, {6,8}};
                            
        vector<vector<long long>> dp(10, vector<long long>(26,-1));
        long long result  = 0;
        for(int i=0; i<10; i++){
            result += dfs(i, n-1, adj, dp);
        }
        
        return result;
    }
};
