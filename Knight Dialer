//sol 1
class Solution {
public:
    int mod = (int)(1e9 + 7);
    int solve(int row, int col, int n, int m, int value, vector<vector<vector<int>>> &dp){

        if(row >= n || col >= m || row<0 || col<0) return 0;
        if(row==3 && (col==0 || col==2)) return 0;
        if(value==0) return 1;

        if(dp[row][col][value]!=-1) return dp[row][col][value];

        int dR[8] = {-2, -2, -1, -1, 1, 1, 2, 2};
        int dC[8] = {1, -1, -2, 2, -2, 2, -1, 1};

        int result = 0;

        for(int i=0; i<8; i++){
            int nrow = row+dR[i];
            int ncol = col+dC[i];
            result = (result + solve(nrow, ncol, n, m, value-1, dp))%mod;
        }

        return dp[row][col][value] = result;
    }
  
    int knightDialer(int n) {
        int result = 0;
        vector<vector<vector<int>>> dp(4, vector<vector<int>>(3, vector<int> (n,-1)));

        for(int i=0; i<4; i++){
            for(int j=0; j<3; j++){
                if(i==3 && (j==0 || j==2)) continue;

                int count = solve(i, j, 4, 3, n-1, dp);
                result = (result + count)%mod;
            }
        }

        return result;
    }
};

//sol2
    int solve2(int node, int n, vector<vector<int>> &adj, vector<vector<int>> &dp){
        if(n==0) return 1;

        if(dp[node][n]!=-1) return dp[node][n];

        int result = 0;

        for(auto it : adj[node]){
            result = (result + solve2(it, n-1, adj, dp))%mod;
        }

        return dp[node][n] = result;
    }
  
    int knightDialer(int n) {
        int result = 0;

        vector<vector<int>> adj = {{4,6}, {6,8}, {7,9}, {4,8}, {3,9,0}, {}, {1, 7, 0}, {2,6}, {1,3}, {2,4}};

        vector<vector<int>> dp(10, vector<int>(n,-1));

        for(int i=0; i<=9; i++){
            result = (result + solve2(i, n-1, adj, dp))%mod;
        }

        return result;
    }

//sol3
    int knightDialer(int n) {

        vector<vector<int>> adj = {{4,6}, {6,8}, {7,9}, {4,8}, {3,9,0}, {}, {1, 7, 0}, {2,6}, {1,3}, {2,4}};

        vector<vector<int>> dp(10, vector<int>(n,0));

        for(int i=0; i<10; i++) dp[i][0] = 1;

        for (int j = 1; j < n; ++j) {
            for (int i = 0; i < 10; ++i) {
                int result = 0;
                for (auto it : adj[i]) {
                    result = (result + dp[it][j - 1]) % mod;
                }
                dp[i][j] = result;
            }
        }

        int result = 0;
        for(int i=0; i<10; i++){
            result = (result + dp[i][n-1])%mod;
        }

        return result;
    }

//sol 4 space optimization couldnt do it
